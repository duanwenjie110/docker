#! /bin/bash
parent_dir=`pwd`
config_dir="$parent_dir/data/conf/mds/"
config_arr=("/conf/nginx.conf")
temp_dir="$parent_dir/temp/mds-temp/"
#存放config的远程路径
s_dir="$5/mds/"
#config要替换的通配符
wildcards_local="localIp"
wildcards_tomcat="tomcatIpPort"
#仓库地址
repository_addr="$1:$4"

service_name="mds"
ip=$2
user=$3

checkFunctions (){
if [ $? -ne 0 ] 
then
	echo "comond execute fail"
	exit	
fi
}
checkIpPort(){
	if echo $1 |egrep -q '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\:[0-9]{1,5}$'
	then    
		        ipCheck=`echo $1 | awk -F: '{print $1}'`
			a=`echo $ipCheck | awk -F. '{print $1}'`
			b=`echo $ipCheck | awk -F. '{print $2}'`
			c=`echo $ipCheck | awk -F. '{print $3}'`
			d=`echo $ipCheck | awk -F. '{print $4}'`

			if [ $a -gt 255 ] || [ $a -lt 0 ]
			then
				echo "ip address error ($a must between 0-255)"
				return 0
			elif [ $b -gt 255 ] || [ $b -lt 0 ]
			then
				echo "ip address error ($b must between 0-255)"
				return 0
			elif [ $c -gt 255 ] || [ $c -lt 0 ]
			then
				echo "ip address error ($c must between 0-255)"
				return 0
			elif [ $d -gt 255 ] || [ $d -lt 0 ]
			then
				echo "ip address error ($d must between 0-255)"
				return 0
			else
				if ping -c 3 $ipCheck > /dev/null
				then
					echo "$ipCheck ping success"
					portCheck=`echo $1 | awk -F: '{print $2}'`
					if [ $portCheck -gt 65535 ] || [ $portCheck -lt 1 ]
					then
						echo "error,input port between 1-65535"
						return 0
					else    
					        return 1
					fi
					
				else
					echo "$1 ping fail"
					return 0
				fi
			fi
	else
			echo "ip:port error (must like this ->xxx.xxx.xxx.xxx:xxxx)"
			return 0
	fi
	 
}

ipcheck(){
	if echo $1 |egrep -q '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'
		then
			a=`echo $1 | awk -F. '{print $1}'`
			b=`echo $1 | awk -F. '{print $2}'`
			c=`echo $1 | awk -F. '{print $3}'`
			d=`echo $1 | awk -F. '{print $4}'`

			if [ $a -gt 255 ] || [ $a -lt 0 ]
				then
					echo "ip address is error"
					elif [ $b -gt 255 ] || [ $b -lt 0 ]
					then
						echo "ip address is error"
						elif [ $c -gt 255 ] || [ $c -lt 0 ]
						then
							echo "ip address is error"
							elif [ $d -gt 255 ] || [ $d -lt 0 ]
							then
								echo "ip address is error"
							else
							if ping -c 5 $1 > /dev/null
								then
									echo "ping success"
								return 1
							else
							echo "ping faild"
						return 0
					fi
				fi
			else
			echo 'ip address is error'
		return 0
	fi
}

stty erase ^H
echo "validate default port:10000"
port=10000
result=$(ssh $user@$ip netstat -an | grep LISTEN | grep -w $port)
#echo $result
if [[ $result != *$port*  ]]
then
	echo "$port usable"
else
	echo "$port unusable"
	exit -1
fi
echo "copy temp config files"
#如果没有temp_dir目录则创建
if [ ! -d $temp_dir ]; then
	sudo mkdir -p -m 755 $temp_dir
	checkFunctions
	echo "sudo mkdir -p -m 755 ${temp_dir} done"
fi

cp  -arf $config_dir/* $temp_dir;
checkFunctions
#echo $?
echo "copy done"

for data in ${config_arr[@]}
	do
		while(true)
		do
			echo "Edit $data,enter local ip to replace:"
			read localIp;
			ipcheck $localIp
			if [ $? -eq 1 ]
			then
				sed -i "s/$wildcards_local/$localIp/g" $temp_dir${data}
				checkFunctions
				break
			else
				continue
			fi
		done

		while(true)
		do
			echo "Edit $data,enter tomcat ip and port to replace -------127.0.0.1:8080----------------"
			read tomcatIpPort
			checkIpPort $tomcatIpPort
			if [ $? -eq 1 ]
			then
			sed -i "s/$wildcards_tomcat/$tomcatIpPort/g" $temp_dir${data}
			checkFunctions
			break
			else
			continue
			fi

		done
	done
echo "Edit done"
echo "Copy config file to $ip "
echo "Determine whether remote directory exists"
ssh $user@$ip "if [ ! -d $s_dir ]; then
mkdir -p -m 755 $s_dir
echo "mkdir -p -m 755 ${s_dir} done"
	else echo "${s_dir} 存在"
	fi
	#;if [ ! -d $images_dir ]; then
	#  mkdir -p -m 755 $images_dir
#  echo "mkdir -p -m 755 ${images_dir} done"
	#  else echo "${images_dir} 存在"
	#fi
	"
checkFunctions
echo "Coping config file"
scp -r $temp_dir/* $user@$ip:$s_dir
checkFunctions
echo "Cope config file done"

#echo "Coping image"
#scp -r $local_images_dir/$image_name $user@$ip:$images_dir
#echo "Cope image done"

echo "Remove temple file"
rm -rf $temp_dir
checkFunctions
echo "rm done"

#从远程仓库拉镜像
dockerResult=$(curl -s $repository_addr/v2/_catalog )
if  [[ $dockerResult ]]
	then
		echo "remote $repository_addr  docker repository usable"
	else
	echo "remote $repository_addr  docker repository confuse connect"
exit -1
fi

version=$(curl -s $repository_addr/v2/$service_name/tags/list)
if [[ $version != *errors*  ]]
	then
		echo "$service_name version list"
	else
	echo "version not found ,exit"
exit -1
fi

version_arr=`echo $version|cut -d '[' -f2|cut -d ']' -f1`

echo $version_arr | awk  'BEGIN{RS=","}{print FNR":" $1}'
while(true)
do
	echo "input number to choose images"
	read tag
	IFS=","
	arr=($version_arr)
	if echo $tag |egrep -q "^[1-"${#arr[@]}"]{1}$"
		then
			echo "you choose the version is ${arr[$tag-1]}"
			break
		else
		echo "error,input numbers between 1-${#arr[@]}"
	fi
done

echo "run docker in $ip"
ssh $user@$ip "docker run --name=mds --net=host --log-opt max-size=1m --log-opt max-file=3 --restart=always -v /etc/localtime:/etc/localtime:ro -v $s_dir/conf:/usr/local/nginx-mds/conf -itd $repository_addr/$service_name:${arr[$ss-1]}"
checkFunctions
echo "run docker done"
